int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}
int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}
int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}
int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}
int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}
int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}
int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}
int main(int argc, char** argv) {
    // Оставшийся код не изменен...

    send(sock, config.files[0].c_str(), config.files[0].length(), 0);
    std::cout << "File " << config.files[0] << " sent" << std::endl;
    memset(buffer, 0, BUFFER_SIZE);
    valread = read(sock, buffer, BUFFER_SIZE);

    // Разбор и вывод полученных данных
    std::string response(buffer, valread);
    std::istringstream iss(response);
    std::string existsStr;
    double serverFileSize;
    if (iss >> existsStr >> serverFileSize) {
        bool exists = existsStr == "true";
        std::cout << "File exists: " << std::boolalpha << exists
                  << ", Server file size: " << serverFileSize << std::endl;

        // Проверяем размер файла на клиенте
        std::ifstream file(config.files[0], std::ifstream::ate | std::ifstream::binary);
        if (file) {
            double localFileSize = file.tellg();
            if (localFileSize == serverFileSize) {
                std::cout << "READY" << std::endl;
            } else {
                std::cerr << "Error: File size mismatch. Local: " << localFileSize
                          << ", Server: " << serverFileSize << std::endl;
            }
        } else {
            std::cerr << "Error: Unable to open the file." << std::endl;
        }

    } else {
        std::cerr << "Failed to parse server response: " << response << std::endl;
    }

    close(sock);
    return 0;
}

